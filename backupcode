document.addEventListener("DOMContentLoaded", function () {
    const board = document.querySelector(".main-content");
    const addColumnButton = document.querySelector(".add-column");
    const boardId = new URLSearchParams(window.location.search).get('id_board') || 1;
    
    const modalHTML = `
    <!-- Add Column Modal -->
    <div id="addColumnModal" class="modal-overlay">
        <!-- Modal content remains the same -->
    </div>
    
    <!-- Add Task Modal -->
    <div id="addTaskModal" class="modal-overlay">
        <!-- Modal content remains the same -->
    </div>
    
    <!-- Edit Task Modal -->
    <div id="editTaskModal" class="modal-overlay">
        <!-- Modal content remains the same -->
    </div>
    
    <!-- Task Actions Modal -->
    <div id="taskActionsModal" class="modal-overlay">
        <!-- Modal content remains the same -->
    </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    const addColumnModal = document.getElementById("addColumnModal");
    const addTaskModal = document.getElementById("addTaskModal");
    const editTaskModal = document.getElementById("editTaskModal");
    const taskActionsModal = document.getElementById("taskActionsModal");
    let currentTaskColumn;
    let currentTaskCard;
    let currentTaskId;
    let currentListId;
    loadLists();
    
    function loadLists() {
        const columns = document.querySelectorAll(".board-column");
        columns.forEach(column => column.remove());
        fetch(`/lists/${boardId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to load lists');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    data.data.forEach(list => {
                        createColumnElement(list);
                        loadTasks(list.id_list);
                    });
                }
            })
            .catch(error => {
                console.error('Error loading lists:', error);
                showNotification('Failed to load lists', 'error');
            });
    }
    
    function createColumnElement(list) {
        const newColumn = document.createElement("div");
        newColumn.classList.add("board-column");
        newColumn.dataset.listId = list.id_list;
        newColumn.innerHTML = `
            <div class="column-header">
                <div class="column-title">
                    <span>${list.title}</span>
                    <span class="task-count">0</span>
                </div>
                <button class="add-task-btn">+</button>
            </div>
            <div class="tasks-container"></div>
        `;
        
        board.insertBefore(newColumn, addColumnButton);
        const newAddTaskBtn = newColumn.querySelector(".add-task-btn");
        newAddTaskBtn.addEventListener("click", function() {
            currentTaskColumn = newColumn;
            currentListId = list.id_list;
            openModal(addTaskModal);
        });
    }
    
    function loadTasks(listId) {
        fetch(`/tasks/${listId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to load tasks');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    const column = document.querySelector(`.board-column[data-list-id="${listId}"]`);
                    const tasksContainer = column.querySelector(".tasks-container");
                    
                    data.data.forEach(task => {
                        const taskCard = createTaskElement(task);
                        tasksContainer.appendChild(taskCard);
                    });
                    
                    updateTaskCount(column);
                    setupTaskCardListeners();
                }
            })
            .catch(error => {
                console.error(`Error loading tasks for list ${listId}:`, error);
                showNotification('Failed to load tasks', 'error');
            });
    }
    
    function createTaskElement(task) {
        const taskCard = document.createElement("div");
        taskCard.classList.add("task-card");
        taskCard.dataset.taskId = task.id_task;
        
        switch(task.priority) {
            case 'high':
                taskCard.classList.add("high-priority");
                break;
            case 'medium':
                taskCard.classList.add("medium-priority");
                break;
            case 'low':
                taskCard.classList.add("low-priority");
                break;
            default:
                taskCard.classList.add("medium-priority");
        }
        
        const labels = task.label ? task.label.split(',') : [];
        let labelsHTML = '';
        
        if (labels.length > 0) {
            labelsHTML = '<div class="task-labels">';
            labels.forEach(label => {
                labelsHTML += `<span class="task-label label-${label.trim()}">${label.trim()}</span>`;
            });
            labelsHTML += '</div>';
        }
        
        taskCard.innerHTML = `
            ${labelsHTML}
            <div class="task-title">${task.title}</div>
            <div class="task-description">${task.description || "No description provided"}</div>
            <div class="task-meta">
                <div class="task-members">
                    <div class="member-avatar">${task.assignee_initials}</div>
                </div>
                <div>${new Date(task.created_at || Date.now()).toLocaleDateString()}</div>
            </div>
        `;
        
        return taskCard;
    }
    
    addColumnButton.addEventListener("click", function() {
        openModal(addColumnModal);
    });
    
    document.querySelectorAll(".modal-close").forEach(closeButton => {
        closeButton.addEventListener("click", function() {
            closeModal(closeButton.closest(".modal-overlay"));
        });
    });
    
    document.querySelectorAll(".cancel-btn").forEach(cancelButton => {
        cancelButton.addEventListener("click", function() {
            closeModal(cancelButton.closest(".modal-overlay"));
        });
    });
    
    document.querySelectorAll(".modal-overlay").forEach(overlay => {
        overlay.addEventListener("click", function(e) {
            if (e.target === overlay) {
                closeModal(overlay);
            }
        });
    });
    
    document.querySelector(".save-column-btn").addEventListener("click", function() {
        const columnNameInput = document.getElementById("columnName");
        const columnName = columnNameInput.value.trim();
        
        if (!columnName) {
            showNotification('Please enter a column name', 'warning');
            return;
        }
        
        fetch('/lists', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id_board: boardId,
                title: columnName
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to create list');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                const list = {
                    id_list: data.listId,
                    title: columnName
                };
                createColumnElement(list);
                showNotification('Column created successfully', 'success');
            }
        })
        .catch(error => {
            console.error('Error creating list:', error);
            showNotification('Failed to create column', 'error');
        });
        
        closeModal(addColumnModal);
        columnNameInput.value = "";
    });
    
    document.querySelector(".save-task-btn").addEventListener("click", function() {
        const taskTitleInput = document.getElementById("taskTitle");
        const taskDescInput = document.getElementById("taskDescription");
        const taskPrioritySelect = document.getElementById("taskPriority");
        const taskAssigneeInput = document.getElementById("taskAssignee");
        
        const title = taskTitleInput.value.trim();
        const description = taskDescInput.value.trim();
        const priority = taskPrioritySelect.value.replace('-priority', '');
        const assignee = taskAssigneeInput.value.trim() || "NA";
        
        if (!title) {
            showNotification('Please enter a task title', 'warning');
            return;
        }
        
        const selectedLabels = [];
        if (document.getElementById("labelBug").checked) {
            selectedLabels.push('bug');
        }
        if (document.getElementById("labelFeature").checked) {
            selectedLabels.push('feature');
        }
        if (document.getElementById("labelDesign").checked) {
            selectedLabels.push('design');
        }
        
        fetch('/tasks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id_list: currentListId,
                title: title,
                description: description,
                priority: priority,
                label: selectedLabels.join(','),
                assignee: assignee
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to create task');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                const task = {
                    id_task: data.taskId,
                    title: title,
                    description: description,
                    priority: priority,
                    label: selectedLabels.join(','),
                    assignee_initials: assignee.slice(0, 2).toUpperCase(),
                    created_at: new Date()
                };
                
                const taskCard = createTaskElement(task);
                const tasksContainer = currentTaskColumn.querySelector(".tasks-container");
                tasksContainer.appendChild(taskCard);
                updateTaskCount(currentTaskColumn);
                setupTaskCardListeners();
                
                showNotification('Task created successfully', 'success');
            }
        })
        .catch(error => {
            console.error('Error creating task:', error);
            showNotification('Failed to create task', 'error');
        });
        
        // Reset form
        taskTitleInput.value = "";
        taskDescInput.value = "";
        taskPrioritySelect.value = "medium-priority";
        taskAssigneeInput.value = "";
        document.getElementById("labelBug").checked = false;
        document.getElementById("labelFeature").checked = false;
        document.getElementById("labelDesign").checked = false;
        
        closeModal(addTaskModal);
    });
    
    function setupTaskCardListeners() {
        document.querySelectorAll(".task-card").forEach(card => {
            card.setAttribute("draggable", "true");
            
            const newCard = card.cloneNode(true);
            card.parentNode.replaceChild(newCard, card);
            
            newCard.addEventListener("click", function(e) {
                currentTaskCard = this;
                currentTaskColumn = this.closest(".board-column");
                currentTaskId = this.dataset.taskId;
                currentListId = currentTaskColumn.dataset.listId;
                
                const taskTitle = this.querySelector(".task-title").textContent;
                document.getElementById("actionTaskTitle").textContent = taskTitle;
                
                openModal(taskActionsModal);
            });
        });
    }
    
    document.querySelector("#taskActionsModal .edit-btn").addEventListener("click", function() {
        closeModal(taskActionsModal);
        
        const taskTitle = currentTaskCard.querySelector(".task-title").textContent;
        const taskDesc = currentTaskCard.querySelector(".task-description").textContent;
        const assigneeElement = currentTaskCard.querySelector(".member-avatar");
        const assignee = assigneeElement ? assigneeElement.textContent : "";
        
        let taskPriority = "medium-priority";
        if (currentTaskCard.classList.contains("high-priority")) {
            taskPriority = "high-priority";
        } else if (currentTaskCard.classList.contains("low-priority")) {
            taskPriority = "low-priority";
        }
        
        document.getElementById("editTaskTitle").value = taskTitle;
        document.getElementById("editTaskDescription").value = taskDesc === "No description provided" ? "" : taskDesc;
        document.getElementById("editTaskPriority").value = taskPriority;
        document.getElementById("editTaskAssignee").value = assignee;
        
        document.getElementById("editLabelBug").checked = currentTaskCard.innerHTML.includes("label-bug");
        document.getElementById("editLabelFeature").checked = currentTaskCard.innerHTML.includes("label-feature");
        document.getElementById("editLabelDesign").checked = currentTaskCard.innerHTML.includes("label-design");
        
        openModal(editTaskModal);
    });
    
    document.querySelector("#taskActionsModal .delete-btn").addEventListener("click", function() {
        if (confirm("Are you sure you want to delete this task?")) {
            // Call API to delete task
            fetch(`/tasks/${currentTaskId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to delete task');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    currentTaskCard.remove();
                    updateTaskCount(currentTaskColumn);
                    showNotification('Task deleted successfully', 'success');
                }
            })
            .catch(error => {
                console.error('Error deleting task:', error);
                showNotification('Failed to delete task', 'error');
            });
            
            closeModal(taskActionsModal);
        }
    });
    
    document.querySelector(".delete-task-btn").addEventListener("click", function() {
        if (confirm("Are you sure you want to delete this task?")) {
            fetch(`/tasks/${currentTaskId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to delete task');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    currentTaskCard.remove();
                    updateTaskCount(currentTaskColumn);
                    showNotification('Task deleted successfully', 'success');
                }
            })
            .catch(error => {
                console.error('Error deleting task:', error);
                showNotification('Failed to delete task', 'error');
            });
            
            closeModal(editTaskModal);
        }
    });
    
    document.querySelector(".update-task-btn").addEventListener("click", function() {
        const taskTitle = document.getElementById("editTaskTitle").value.trim();
        const taskDesc = document.getElementById("editTaskDescription").value.trim();
        const taskPriority = document.getElementById("editTaskPriority").value;
        const taskAssignee = document.getElementById("editTaskAssignee").value.trim() || "NA";
        
        if (!taskTitle) {
            showNotification('Please enter a task title', 'warning');
            return;
        }
        
        const selectedLabels = [];
        if (document.getElementById("editLabelBug").checked) {
            selectedLabels.push('bug');
        }
        if (document.getElementById("editLabelFeature").checked) {
            selectedLabels.push('feature');
        }
        if (document.getElementById("editLabelDesign").checked) {
            selectedLabels.push('design');
        }
        
        fetch(`/tasks/${currentTaskId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                title: taskTitle,
                description: taskDesc,
                priority: taskPriority.replace('-priority', ''),
                label: selectedLabels.join(','),
                assignee: taskAssignee
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to update task');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                currentTaskCard.classList.remove("low-priority", "medium-priority", "high-priority");
                currentTaskCard.classList.add(taskPriority);
                
                const labelsHTML = selectedLabels.length > 0 ? 
                    `<div class="task-labels">${selectedLabels.map(label => 
                        `<span class="task-label label-${label}">${label.charAt(0).toUpperCase() + label.slice(1)}</span>`
                    ).join('')}</div>` : '';
                
                const dateElement = currentTaskCard.querySelector(".task-meta div:last-child");
                const originalDate = dateElement ? dateElement.textContent : new Date().toLocaleDateString();
                
                currentTaskCard.innerHTML = `
                    ${labelsHTML}
                    <div class="task-title">${taskTitle}</div>
                    <div class="task-description">${taskDesc || "No description provided"}</div>
                    <div class="task-meta">
                        <div class="task-members">
                            <div class="member-avatar">${taskAssignee.slice(0, 2).toUpperCase()}</div>
                        </div>
                        <div>${originalDate}</div>
                    </div>
                `;
                
                showNotification('Task updated successfully', 'success');
                setupTaskCardListeners();
            }
        })
        .catch(error => {
            console.error('Error updating task:', error);
            showNotification('Failed to update task', 'error');
        });
        
        closeModal(editTaskModal);
    });
    
    function enableDragAndDrop() {
        let draggedItem = null;
        
        document.addEventListener("dragstart", function(e) {
            if (e.target.classList.contains("task-card")) {
                draggedItem = e.target;
                e.dataTransfer.effectAllowed = "move";
                e.dataTransfer.setData("text/html", draggedItem.outerHTML);
                e.target.style.opacity = "0.5";
            }
        });
        
        document.addEventListener("dragend", function(e) {
            if (e.target.classList.contains("task-card")) {
                e.target.style.opacity = "1";
            }
        });
        
        document.querySelectorAll(".tasks-container").forEach(container => {
            container.addEventListener("dragover", function(e) {
                e.preventDefault();
                e.dataTransfer.dropEffect = "move";
            });
            
            container.addEventListener("drop", function(e) {
                e.preventDefault();
                if (draggedItem) {
                    const sourceListId = draggedItem.closest(".board-column").dataset.listId;
                    const targetListId = this.closest(".board-column").dataset.listId;
                    const taskId = draggedItem.dataset.taskId;
                    
                    if (sourceListId !== targetListId) {
                        fetch(`/tasks/${taskId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                id_list: targetListId
                            })
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to move task');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                this.appendChild(draggedItem);
                                document.querySelectorAll(".board-column").forEach(updateTaskCount);
                                showNotification('Task moved successfully', 'success');
                            }
                        })
                        .catch(error => {
                            console.error('Error moving task:', error);
                            showNotification('Failed to move task', 'error');
                            loadLists();
                        });
                    } else {
                        this.appendChild(draggedItem);
                        document.querySelectorAll(".board-column").forEach(updateTaskCount);
                    }
                    
                    setupTaskCardListeners();
                }
            });
        });
    }
    
    function openModal(modal) {
        modal.style.display = "flex";
        const firstInput = modal.querySelector("input");
        if (firstInput) {
            firstInput.focus();
        }
    }
    
    function closeModal(modal) {
        modal.style.display = "none";
    }
    
    function updateTaskCount(column) {
        const taskCount = column.querySelectorAll(".task-card").length;
        column.querySelector(".task-count").textContent = taskCount;
    }
    
    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    }
    
    document.addEventListener("keydown", function(e) {
        if (e.key === "Escape") {
            const openModals = document.querySelectorAll(".modal-overlay[style='display: flex;']");
            openModals.forEach(modal => closeModal(modal));
        }
        
        if (e.key === "Enter" && !e.shiftKey && !e.ctrlKey && !e.altKey) {
            const addColumnModalVisible = addColumnModal.style.display === "flex";
            const addTaskModalVisible = addTaskModal.style.display === "flex";
            const editTaskModalVisible = editTaskModal.style.display === "flex";
            
            if (addColumnModalVisible && document.activeElement.id === "columnName") {
                document.querySelector(".save-column-btn").click();
            } else if (addTaskModalVisible && document.activeElement.id === "taskTitle") {
                document.querySelector(".save-task-btn").click();
            } else if (editTaskModalVisible && document.activeElement.id === "editTaskTitle") {
                document.querySelector(".update-task-btn").click();
            }
        }
    });
    
    setupTaskCardListeners();
    enableDragAndDrop();
});